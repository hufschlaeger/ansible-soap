stages:
  - release
  - verify

variables:
  PYTHON_VERSION: "3.11"
  DOCKER_IMAGE: "python:3.11-slim"

release:
  stage: release
  image: $DOCKER_IMAGE
  tags: [docker]
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v/'  # Triggert bei Tags wie v1.0.0
  before_script:
    - python -V
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install --upgrade pip
  script:
    - pip install ansible-core
    - |
      # Version aus Tag extrahieren
      VERSION=${CI_COMMIT_TAG#v}
      echo "Building version: $VERSION"
      echo "VERSION=$VERSION" >> release.env
    - |
      # galaxy.yml Version aktualisieren
      VERSION=$(cat release.env | grep VERSION | cut -d '=' -f2)
      sed -i "s/^version:.*/version: $VERSION/" galaxy.yml
    - |
      # Collection bauen
      ansible-galaxy collection build --force
    - |
      # Zu Ansible Galaxy publizieren
      ansible-galaxy collection publish *.tar.gz --api-key ${GALAXY_API_KEY}
  artifacts:
    paths:
      - "*.tar.gz"
      - release.env
  release:
    name: 'Release $VERSION'
    description: |
      ## Release $VERSION

      ### Installation
      ```bash
      ansible-galaxy collection install hufschlaeger.soap_client:$VERSION
      ```

      ### What's New
      See [CHANGELOG.md](CHANGELOG.md) for details.
    tag_name: '$CI_COMMIT_TAG'
    assets:
      links:
        - name: 'Collection Package'
          url: '$CI_PROJECT_URL/-/jobs/$CI_JOB_ID/artifacts/raw/$(ls *.tar.gz)'
  after_script:
    - |
      # Version für spätere Jobs speichern
      VERSION=$(cat release.env | grep VERSION | cut -d '=' -f2)
      echo "VERSION=$VERSION" >> version.env
      cat version.env
  variables:
    GALAXY_API_KEY: $GALAXY_API_KEY

verify-release:
  stage: verify
  image: $DOCKER_IMAGE
  tags: [docker]
  needs:
    - job: release
      artifacts: true
  before_script:
    - python -V
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install --upgrade pip
  script:
    - pip install ansible-core
    - |
      # Version aus dem Artefakt laden
      VERSION=$(cat version.env | grep VERSION | cut -d '=' -f2)
      echo "Verifying version: $VERSION"
    - |
      # Warten bis Galaxy aktualisiert ist
      echo "Waiting for Galaxy to update..."
      sleep 60
    - |
      # Von Galaxy installieren
      ansible-galaxy collection install hufschlaeger.soap_client:$VERSION
    - |
      # Installation verifizieren
      ansible-galaxy collection list | grep soap_client
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v/'  # Triggert bei Tags wie v1.0.0
